{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const basketSlice = createSlice({\n  name: \"basket\",\n  initialState: {\n    basket: [],\n    total: 0\n  },\n  reducers: {\n    addBasket: (state, action) => {\n      state = state.push(action.payload);\n    },\n    removeBasket: (state, action) => {\n      state = state.filter(p => p.id !== action.payload);\n    },\n    setBasket: (state, action) => {\n      state = action.payload;\n    },\n    resetBasket: state => {\n      state = [];\n    },\n    addBasket: (state, action) => {\n      let doesItemExist;\n      doesItemExist = false;\n      const newState = state.basket.map(item => {\n        if (item.id === action.payload.id) {\n          item.amount += 1;\n          doesItemExist = true;\n        }\n\n        return item;\n      });\n\n      if (doesItemExist) {\n        console.log(\"item exists\");\n        return newState;\n      }\n\n      return { ...state,\n        ...action.payload,\n        amount: 1\n      }; // if (state.basket.find((p) => p.id === action.payload.id)) {\n      //   const index = state.basket.findIndex((p) => p.id === action.payload.id);\n      //   state.basket[index].amount = state.basket[index].amount + 1;\n      // } else {\n      //   let cart = {\n      //     id: action.payload.id,\n      //     amount: 1,\n      //     title: action.payload.title,\n      //     image: action.payload.image,\n      //     price: action.payload.price,\n      //     description: action.payload.description,\n      //     tags: action.payload.tags,\n      //   };\n      //   state.basket.push(cart);\n      // }\n      // let _total = 0;\n      // state.basket.map((item, key) => {\n      //   _total = _total + item.price * item.amount;\n      // })\n      // state = { ...state, total: _total };\n      // state.basket.map((item, key) => {\n      //   console.log(\"item\", item.id);\n      // });\n      // return {\n      //   ...state,\n      //   total: _total,\n      // };\n    }\n  }\n});\nexport const {\n  addBasket,\n  removeBasket,\n  setBasket,\n  resetBasket\n} = basketSlice.actions;\nexport default basketSlice.reducer;","map":{"version":3,"names":["createSlice","basketSlice","name","initialState","basket","total","reducers","addBasket","state","action","push","payload","removeBasket","filter","p","id","setBasket","resetBasket","doesItemExist","newState","map","item","amount","console","log","actions","reducer"],"sources":["/Users/imac/Desktop/ReactApps/spendmoney/src/redux/basket/basketSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const basketSlice = createSlice({\n  name: \"basket\",\n  initialState: {\n    basket: [],\n    total: 0,\n  },\n  reducers: {\n    addBasket: (state, action) => {\n      state = state.push(action.payload);\n    },\n    removeBasket: (state, action) => {\n      state = state.filter((p) => p.id !== action.payload);\n    },\n    setBasket: (state, action) => {\n      state = action.payload;\n    },\n    resetBasket: (state) => {\n      state = [];\n    },\n    addBasket: (state, action) => {\n      let doesItemExist;\n      doesItemExist = false;\n      const newState = state.basket.map((item) => {\n        if (item.id === action.payload.id) {\n          item.amount += 1;\n          doesItemExist = true;\n        }\n        return item;\n      });\n      if (doesItemExist) {\n        console.log(\"item exists\");\n        return newState;\n      }\n\n\n    \n\n      return { ...state, ...action.payload, amount: 1 };\n\n\n      // if (state.basket.find((p) => p.id === action.payload.id)) {\n      //   const index = state.basket.findIndex((p) => p.id === action.payload.id);\n      //   state.basket[index].amount = state.basket[index].amount + 1;\n      // } else {\n      //   let cart = {\n      //     id: action.payload.id,\n      //     amount: 1,\n      //     title: action.payload.title,\n      //     image: action.payload.image,\n      //     price: action.payload.price,\n      //     description: action.payload.description,\n      //     tags: action.payload.tags,\n      //   };\n      //   state.basket.push(cart);\n      // }\n      // let _total = 0;\n      // state.basket.map((item, key) => {\n      //   _total = _total + item.price * item.amount;\n      // })\n\n      // state = { ...state, total: _total };\n\n      // state.basket.map((item, key) => {\n      //   console.log(\"item\", item.id);\n      // });\n\n      // return {\n      //   ...state,\n      //   total: _total,\n      // };\n    },\n    \n  },\n});\n\nexport const {\n  addBasket,\n  removeBasket,\n  setBasket,\n  resetBasket,\n} = basketSlice.actions;\n\nexport default basketSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGD,WAAW,CAAC;EACrCE,IAAI,EAAE,QAD+B;EAErCC,YAAY,EAAE;IACZC,MAAM,EAAE,EADI;IAEZC,KAAK,EAAE;EAFK,CAFuB;EAMrCC,QAAQ,EAAE;IACRC,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC5BD,KAAK,GAAGA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB,CAAR;IACD,CAHO;IAIRC,YAAY,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MAC/BD,KAAK,GAAGA,KAAK,CAACK,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACE,OAApC,CAAR;IACD,CANO;IAORK,SAAS,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;MAC5BD,KAAK,GAAGC,MAAM,CAACE,OAAf;IACD,CATO;IAURM,WAAW,EAAGT,KAAD,IAAW;MACtBA,KAAK,GAAG,EAAR;IACD,CAZO;IAaRD,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC5B,IAAIS,aAAJ;MACAA,aAAa,GAAG,KAAhB;MACA,MAAMC,QAAQ,GAAGX,KAAK,CAACJ,MAAN,CAAagB,GAAb,CAAkBC,IAAD,IAAU;QAC1C,IAAIA,IAAI,CAACN,EAAL,KAAYN,MAAM,CAACE,OAAP,CAAeI,EAA/B,EAAmC;UACjCM,IAAI,CAACC,MAAL,IAAe,CAAf;UACAJ,aAAa,GAAG,IAAhB;QACD;;QACD,OAAOG,IAAP;MACD,CANgB,CAAjB;;MAOA,IAAIH,aAAJ,EAAmB;QACjBK,OAAO,CAACC,GAAR,CAAY,aAAZ;QACA,OAAOL,QAAP;MACD;;MAKD,OAAO,EAAE,GAAGX,KAAL;QAAY,GAAGC,MAAM,CAACE,OAAtB;QAA+BW,MAAM,EAAE;MAAvC,CAAP,CAlB4B,CAqB5B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MAEA;MACA;MACA;MAEA;MACA;MACA;MACA;IACD;EAhEO;AAN2B,CAAD,CAA/B;AA2EP,OAAO,MAAM;EACXf,SADW;EAEXK,YAFW;EAGXI,SAHW;EAIXC;AAJW,IAKThB,WAAW,CAACwB,OALT;AAOP,eAAexB,WAAW,CAACyB,OAA3B"},"metadata":{},"sourceType":"module"}